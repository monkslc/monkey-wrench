let decimals = [10, 5, 4, 1];
let numerals = ['X', 'V', 'IV', 'I'];

let decimal_to_numeral_simple = fn number {
	if number - 10 > -1 {
		return 'X' + decimal_to_numeral_simple(number - 10)
	}

	if number - 5 > -1 {
		return 'V' + decimal_to_numeral_simple(number - 5)
	}

	if number - 4 > -1 {
		return 'IV' + decimal_to_numeral_simple(number - 4)
	}

	if number - 1 > -1 {
		return 'I' + decimal_to_numeral_simple(number - 1)
	}
	''
}

let decimal_to_numeral_2 = fn number {
	let _decimal_to_numeral = fn remainder, decimal, numeral, next {
		if remainder - decimal > -1 {
			numeral + _decimal_to_numeral(remainder - decimal, decimal, numeral, next)
		} else {
			next(remainder)
		}
	}

	let _call = fn decimal, numeral, next {
		fn remainder { _decimal_to_numeral(remainder, decimal, numeral, next) }
	}

	_call(10, 'X', _call(5, 'V', _call(4, 'IV', _call(1, 'I', fn { '' }))))(number)
}

let decimal_to_numeral_3 = fn number {
	let _decimal_to_numeral = fn remainder, i {
		if i == len(decimals) { return '' }

		let decimal = decimals[i];
		let numeral = numerals[i];
		if remainder - decimal > -1 {
			numeral + _decimal_to_numeral(remainder - decimal, i)
		} else {
			_decimal_to_numeral(remainder, i+1)
		}
	}

	_decimal_to_numeral(number, 0)
}


puts(decimal_to_numeral_simple(19))
puts(decimal_to_numeral_2(49))
puts(decimal_to_numeral_3(49))
